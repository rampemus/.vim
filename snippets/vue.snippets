extends html, javascript, css

# These snippets form a port of Sarah Drasner's vue-sublime-snippets

# some html-like snippets

snippet slot
	<slot></slot>

snippet template
	<template>
		${1}
	</template>

snippet transition
	<transition></transition>

# The following snippets create more complex boilerplate code.

snippet vbase
	<template>
		<div>
			${0}
		</div>
	</template>

	<script>
		export default{
			${0}
		}
	</script>

	<style scoped>
		${1}
	</style>

snippet vimport:c
	import ${1} from './components/$1.vue'

	export default {
		components: {
			$1
		}
	}${1}

snippet vactions
	actions: {
		${1}({commit}, ${2}) {
			commit($1, $2)
		}
	}${1}

# Add in js animation hooks
snippet vanim:js:el
	<transition
		@before-enter="beforeEnter"
		@enter="enter"
		@after-enter="afterEnter"
		@enter-cancelled="enterCancelled"

		@before-Leave="beforeLeave"
		@leave="leave"
		@after-leave="afterLeave"
		@leave-cancelled="leaveCancelled"
		:css="false">

	 </transition>${1}

snippet vanim:js:method
	methods: {
		beforeEnter(el) {
			console.log('beforeEnter')
		},
		enter(el, done) {
			console.log('enter')
			done()
		},
		afterEnter(el) {
			console.log('afterEnter')
		},
		enterCancelled(el, done) {
			console.log('enterCancelled')
		},
		beforeLeave(el) {
			console.log('beforeLeave')
		},
		leave(el, done) {
			console.log('leave')
			done()
		},
		afterLeave(el) {
			console.log('afterLeave')
		},
		leaveCancelled(el, done) {
			console.log('leaveCancelled')
		}
	}${1}

snippet vcl
	@click="${1}"${2}

snippet vdata
	data() {
		return {
			${1}: ${2}
		}
	}${3}

snippet vfilter
	filters: {
		${1}: function(${2}) {
			return${4}
		}
	}

snippet vfor
	<div v-for="${1} in ${2}" :key="${3}">
	  ${4}
	</div>${5}

snippet vgetters
	getters: {
		${1}: state => {
			return state.${2}
		}
	}${3}

snippet vimport
	import ${1} from './components/${2}.vue'

snippet vkeep
	<keep-alive>
		<component :is="">
			<p>default</p>
		</component>
	</keep-alive>${1}

snippet vmixin
	const ${1} = {
		mounted() {
			console.log('hello from mixin!')
		},
	}
	const ${2} = Vue.extend({
		mixins: [${3}]
	})

snippet vmutations
	mutations: {
		${1}(state, ${3}) => {
			state.${2} = ${4}
		}
	}${5}

snippet vprops:d
	${1}: {
		type: ${2},
		default: ${3}
	},

snippet vprops
	${1}: {
		type: ${2}
	},${3}

snippet vstore
	import Vue from 'vue'
	import Vuex from 'vuex'

	Vue.use(Vuex)

	export const store = new Vuex.Store({
		state: {
			${1}: ${2}
		}
	})${3}


# vue-i18n snippets https://github.com/kazupon/vue-i18n

snippet trans
	$t('$1')${2}

# Translation with parameter
snippet transc
	$t('${1}', { ${2}: ${3} })${4}

